{"version":3,"sources":["components/Navbar/Navbar.js","components/ListBlocks/ListBlocks.js","components/Legends/Legends.js","algorithms/bubbleSort.js","algorithms/insertionSort.js","algorithms/selectionSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","App.js","index.js"],"names":["Navbar","handleLength","handleSpeed","handleAlgo","generateRandomArray","handleSort","sorting","completed","len","speed","algo","className","type","onChange","min","max","value","Math","ceil","disabled","step","onClick","ListBlocks","blocks","compare","sorted","swap","useState","window","innerWidth","length","width","setWidth","color","useEffect","addEventListener","map","block","i","height","bg","includes","style","key","Legends","arr","j","temp","bubbleSort","dupBlocks","slice","order","push","insertionSort","selectionSort","mergeSortHelper","l","r","mid","floor","merge","mergeSort","quickSortHelper","pivot","random","m","partition","quickSort","App","setCompleted","setSorting","setSortedIndex","randomArray","Array","from","keys","randomIndex","setBlocks","setAlgo","setLength","setSpeed","setCompare","setSwap","sortedIndex","event","Number","target","sortAccOrder","loop","setTimeout","k","index","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.672b2996.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Navbar.css'\r\n\r\nconst Navbar = ({ handleLength, handleSpeed, handleAlgo, generateRandomArray, handleSort, sorting, completed, len, speed, algo }) =>{\r\n\r\n    return (\r\n        <nav>\r\n            <div className='nav-brand'>SORTING ALGORITHM VISUALIZER</div>\r\n\r\n            <div className='toolbox'>\r\n                <div>\r\n                    <div className='group speed'>\r\n                        <label>Speed</label>\r\n                        <input type='range' onChange={handleSpeed} min='1' max='10' value={Math.ceil(400 / speed)} disabled={sorting}></input>\r\n                    </div>\r\n\r\n                    <div className='group length'>\r\n                        <label>Length</label>\r\n                        <input type='range' onChange={handleLength} min='5' max={100} step='1' disabled={sorting} value={len}></input>\r\n                    </div>\r\n                    \r\n                    <select onChange={handleAlgo} disabled={sorting} value={algo}>\r\n                        <option value='bubbleSort'>Bubble Sort</option>\r\n                        <option value='insertionSort'>Insertion Sort</option>\r\n                        <option value='selectionSort'>Selection Sort</option>\r\n                        <option value='mergeSort'>Merge Sort</option>\r\n                        <option value='quickSort'>Quick Sort</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <div>\r\n                    <button onClick={generateRandomArray} disabled={sorting}>Randomize</button>\r\n                    <button onClick={handleSort} disabled={sorting || completed}>Sort</button>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { useState, useEffect } from 'react'\r\nimport './ListBlocks.css'\r\n\r\nfunction ListBlocks({ blocks, compare, sorted, swap }){\r\n    const [width, setWidth] = useState(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 5))\r\n    const color = blocks.length <= 50 && width > 14 ? 'black' : 'transparent'\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize)\r\n\r\n        setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\r\n    }, [blocks.length])\r\n\r\n    return (\r\n        <div className='listBlocks'>\r\n\r\n            {blocks.map((block, i) => {\r\n                const height = block * 500 / blocks.length;\r\n                let bg = 'turquoise'\r\n\r\n                // i th element is being compared with some other element\r\n                if(compare && (i === compare[0] || i === compare[1])){\r\n                    bg = '#ffff50'\r\n                }\r\n\r\n                if(swap && (i === swap[0] || i === swap[1])){\r\n                    bg='red'\r\n                }\r\n                // i th element is in its correct position\r\n                if(sorted && sorted.includes(i)){\r\n                    bg = '#4bc52e'\r\n                }\r\n\r\n                const style = {\r\n                    'backgroundColor': bg,\r\n                    'color': color, \r\n                    'height': height, \r\n                    'width': width\r\n                }\r\n                return (<div key={i} className='block' style={style}>{block}</div>)\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListBlocks\r\n","import React from 'react'\r\nimport './Legends.css'\r\n\r\nconst Legends = ({algo}) => {\r\n    return (\r\n        <div className='legends'>\r\n            <div className='key'> \r\n                <span className='sq compare'></span> Compare\r\n            </div>\r\n            <div className='key'> \r\n                <span className='sq swap'></span> {algo !== 'mergeSort' ? 'Swap' : 'Taking From Auxillary Space'}\r\n            </div>\r\n            <div className='key'> \r\n                <span className='sq sorted'></span> Sorted\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legends\r\n","const swap = (arr, i, j) => {\r\n    const temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n}\r\n\r\nconst bubbleSort = (blocks) => {\r\n\r\n    const dupBlocks = blocks.slice() // copying blocks array\r\n    const order = []\r\n\r\n    let i, j\r\n    \r\n    for (i = 0; i < dupBlocks.length; i++) {\r\n        for (j = 0; j < dupBlocks.length - i - 1; j++) {\r\n\r\n            order.push([j, j + 1, null, null])                  // Compare\r\n            if (dupBlocks[j] > dupBlocks[j + 1]) {\r\n                swap(dupBlocks, j, j + 1)\r\n                order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\r\n            }\r\n        }\r\n        order.push([null, null, null, j]) // j-th element is in correct position ( Sorted )\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default bubbleSort\r\n\r\n","const swap = (arr, i, j) => {\r\n    const temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n}\r\n\r\nconst insertionSort = (blocks) => {\r\n\r\n    const dupBlocks = blocks.slice() // copying blocks array\r\n    const order = []\r\n\r\n    let i, j\r\n    \r\n    for (i = 0; i < dupBlocks.length; i++) {\r\n        j = i - 1\r\n        while(j >= 0 && dupBlocks[j] > dupBlocks[j + 1]){\r\n            swap(dupBlocks, j, j + 1)\r\n            order.push([j, j + 1, null, null])              // Compare\r\n            order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\r\n            j -= 1\r\n        }\r\n    }\r\n\r\n    for(i=0;i<dupBlocks.length;i++){\r\n        order.push([null, null, null, i])\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default insertionSort","const swap = (arr, i, j) => {\r\n    const temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n}\r\n\r\nconst selectionSort = (blocks) => {\r\n\r\n    const dupBlocks = blocks.slice() // copying blocks array\r\n    const order = []\r\n\r\n    let i, j\r\n    \r\n    for (i = 0; i < dupBlocks.length; i++) {\r\n        for (j = i + 1; j < dupBlocks.length; j++) {\r\n\r\n            order.push([i, j, null, null])                  // Compare\r\n            if (dupBlocks[i] > dupBlocks[j]) {\r\n                swap(dupBlocks, i, j)\r\n                order.push([i, j, dupBlocks.slice(), null]) // Swap\r\n            }\r\n        }\r\n        order.push([null, null, null, i]) // i-th element is in correct position ( Sorted )\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default selectionSort","let order = []\r\n\r\nconst merge = (dupBlocks, l, mid, r) => {\r\n    let i = l, j = mid + 1\r\n\r\n    const arr = [] \r\n\r\n    while((i <= mid) && (j <= r)){\r\n        order.push([i, j, null, null])      // Compare i th and j th element  \r\n        if(dupBlocks[i] <= dupBlocks[j]){\r\n            arr.push(dupBlocks[i++])\r\n        } else {\r\n            arr.push(dupBlocks[j++])\r\n        }\r\n    }\r\n\r\n    while(i <= mid){\r\n        order.push([i, null, null, null])\r\n        arr.push(dupBlocks[i++])\r\n    }\r\n\r\n    while(j <= r){\r\n        order.push([null, j, null, null])\r\n        arr.push(dupBlocks[j++])\r\n    }\r\n    \r\n    for(i=l;i<=r;i++){\r\n        dupBlocks[i] = arr[i - l]\r\n        order.push([i, null, dupBlocks.slice(), null]) \r\n    }\r\n\r\n}\r\n\r\nconst mergeSortHelper = (dupBlocks, l, r) => {\r\n    if(l >= r) \r\n        return \r\n    \r\n    const mid = Math.floor((l + r) / 2)\r\n\r\n    mergeSortHelper(dupBlocks, l, mid)\r\n    mergeSortHelper(dupBlocks, mid + 1, r) \r\n    \r\n    merge(dupBlocks, l, mid, r)\r\n}\r\n\r\nconst mergeSort = (blocks) => {\r\n    order = []\r\n    const dupBlocks = blocks.slice() // copying blocks array\r\n    \r\n    mergeSortHelper(dupBlocks, 0, dupBlocks.length - 1)\r\n    \r\n    for(let i=0;i<dupBlocks.length;i++){\r\n        order.push([null, null, null, i]) // i th element will be in correct position\r\n    }\r\n\r\n    return order\r\n}\r\n\r\nexport default mergeSort","let order = []\r\n\r\nconst swap = (arr, i, j) => {\r\n    const temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n}\r\n\r\nconst partition = (dupBlocks, l, r) => {\r\n    const pivot = l \r\n    let j = l \r\n\r\n    for(let i = l + 1;i<=r;i++){\r\n        order.push([i, pivot, null, null])\r\n        if(dupBlocks[i] < dupBlocks[pivot]){\r\n            j += 1 \r\n            swap(dupBlocks, i, j)\r\n            order.push([i, j, dupBlocks.slice(), null])\r\n        }\r\n    }\r\n\r\n    swap(dupBlocks, pivot, j)\r\n    order.push([pivot, j, dupBlocks.slice(), null])\r\n    order.push([null, null, null, j])\r\n    return j\r\n}\r\n\r\n\r\nconst quickSortHelper = (dupBlocks, l, r) => {\r\n    if(l >= r) {\r\n        if(l === r) order.push([null, null, null, l])\r\n        return\r\n    } \r\n\r\n    const pivot = l + Math.floor(Math.random() * (r - l))\r\n\r\n    swap(dupBlocks, l, pivot)\r\n    order.push([l, pivot, dupBlocks.slice(), null])\r\n\r\n    const m = partition(dupBlocks, l, r)\r\n\r\n    quickSortHelper(dupBlocks, l, m - 1)\r\n    quickSortHelper(dupBlocks, m + 1, r)\r\n\r\n    return\r\n}\r\n\r\nconst quickSort = (blocks) => {\r\n    const dupBlocks = blocks.slice() // Copying blocks array\r\n    order = []\r\n    \r\n    quickSortHelper(dupBlocks, 0, dupBlocks.length - 1)\r\n    \r\n    return order\r\n}\r\n\r\nexport default quickSort\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\n\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport ListBlocks from './components/ListBlocks/ListBlocks'\r\nimport Legends from './components/Legends/Legends'\r\n\r\n// Algorithms\r\nimport bubbleSort from './algorithms/bubbleSort'\r\nimport insertionSort from './algorithms/insertionSort'\r\nimport selectionSort from './algorithms/selectionSort'\r\nimport mergeSort from './algorithms/mergeSort'\r\nimport quickSort from './algorithms/quickSort'\r\n\r\nfunction App() {\r\n\t// Generating shuffled array of 1 to len\r\n\tconst generateRandomArray = (len) => {\r\n\t\tsetCompleted(false)\r\n\t\tsetSorting(false)\r\n\t\tsetSortedIndex([])\r\n\r\n\t\tconst randomArray = Array.from(Array(len + 1).keys()).slice(1)\r\n\t\t\r\n\t\tfor (let i = randomArray.length - 1; i > 0; i--) {\r\n\t\t\tconst randomIndex = Math.floor(Math.random() * (i - 1))\r\n\t\t\tconst temp = randomArray[i]\r\n\r\n\t\t\trandomArray[i] = randomArray[randomIndex]\r\n\t\t\trandomArray[randomIndex] = temp\r\n\t\t}\r\n\t\t\r\n\t\tsetBlocks(randomArray)\r\n\t}\r\n\r\n\t// States\r\n\tconst [algo, setAlgo] = useState('bubbleSort')\r\n\tconst [len, setLength] = useState(30)\r\n\tconst [blocks, setBlocks] = useState([])\r\n\tconst [sorting, setSorting] = useState(false)\r\n\tconst [completed, setCompleted] = useState(true)\r\n\tconst [speed, setSpeed] = useState(250)\r\n\tconst [compare, setCompare] = useState([])\r\n\tconst [swap, setSwap] = useState([])\r\n\tconst [sortedIndex, setSortedIndex] = useState([])\r\n\r\n\t// Generating random array every time the length is changed by th user\r\n\tuseEffect(() => {\r\n\t\tgenerateRandomArray(len)\r\n\t}, [len, algo])\r\n\r\n\t// setting the selected algorithm\r\n\tconst handleAlgo = (event) => {\r\n\t\tsetAlgo(event.target.value)\r\n\t}\r\n\r\n\t// handling the length of the array\r\n\tconst handleLength = (event) => {\r\n\t\tsetLength(Number(event.target.value))\r\n\t}\r\n\r\n\t// handling the speed of sorting\r\n\tconst handleSpeed = (event) => {\r\n\t\tsetSpeed(Math.ceil(400 / Number(event.target.value)))\r\n\t}\r\n\r\n\t// Sorting according to the algorithm\r\n\tconst handleSort = () => {\r\n\t\t\r\n\t\tconst sortAccOrder = (order) => {\r\n\t\t\t(function loop(i) {\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\tconst [j, k, arr, index] = order[i]\r\n\t\t\t\t\tsetCompare([j, k])\r\n\t\t\t\t\tsetSwap([])\r\n\r\n\t\t\t\t\tif(index !== null){\r\n\t\t\t\t\t\tsetSortedIndex((prevState) => (\r\n\t\t\t\t\t\t\t[...prevState, index]\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\tif(arr){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsetBlocks(arr)\r\n\t\t\t\t\t\tif(j !== null || k != null)\r\n\t\t\t\t\t\t\tsetSwap([j, k])\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (++i < order.length){\r\n\t\t\t\t\t\tloop(i)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetSorting(false)\r\n\t\t\t\t\t\tsetCompleted(true)\r\n\t\t\t\t\t}   \r\n\t\t\t\t}, speed)\r\n\t\t\t})(0)\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tsetSorting(true)\r\n\r\n\t\talgo === 'bubbleSort' ? sortAccOrder(bubbleSort(blocks)) : \r\n\t\talgo === 'insertionSort' ?  sortAccOrder(insertionSort(blocks)) :\r\n\t\talgo === 'selectionSort' ? sortAccOrder(selectionSort(blocks)) :\r\n\t\talgo === 'mergeSort' ? sortAccOrder(mergeSort(blocks)) : \r\n\t\talgo === 'quickSort' ? sortAccOrder(quickSort(blocks)) : (() => {\r\n\t\t\tsetSorting(false)\r\n\t\t\tsetCompleted(true)\r\n\t\t})()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Navbar \r\n\t\t\t\tgenerateRandomArray={() => generateRandomArray(len)}\r\n\t\t\t\thandleLength={handleLength} \r\n\t\t\t\thandleSpeed={handleSpeed}\r\n\t\t\t\thandleAlgo={handleAlgo}\r\n\t\t\t\thandleSort={handleSort} \r\n\t\t\t\tsorting={sorting}\r\n\t\t\t\tcompleted={completed}\r\n\t\t\t\tlen={len}\r\n\t\t\t\tspeed={speed}\r\n\t\t\t\talgo={algo}\r\n\t\t\t/>\r\n\t\t\t\r\n\t\t\t<ListBlocks \r\n\t\t\t\tblocks={blocks} \r\n\t\t\t\tcompare={sorting && compare}\r\n\t\t\t\tswap={sorting && swap}\r\n\t\t\t\tsorted={sortedIndex} \r\n\t\t\t/>\r\n\r\n\t\t\t<Legends algo={algo}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}